#!/var/beacon/clr/bin/python 
from flask import Flask, jsonify, abort,make_response,request
from celery import Celery
from time import gmtime, strftime
from ctasks import send_mq
from datetime import timedelta
from flask import make_response, request, current_app
from functools import update_wrapper

import celeryconfig
import  ctasks
import pika
import requests


#Global variables and options

atm_status = True

tasks = [
    {
        'id': 1,
        'title': u'Buy groceries',
        'description': u'Milk, Cheese, Pizza, Fruit, Tylenol', 
        'done': False
    },
    {
        'id': 2,
        'title': u'Learn Python',
        'description': u'Need to find a good Python tutorial on the web', 
        'done': False
    }
]


server_ip = '172.28.104.171'



#Head decorator
def crossdomain(origin=None, methods=None, headers=None,
                max_age=21600, attach_to_all=True,
                automatic_options=True):
    if methods is not None:
        methods = ', '.join(sorted(x.upper() for x in methods))
    if headers is not None and not isinstance(headers, basestring):
        headers = ', '.join(x.upper() for x in headers)
    if not isinstance(origin, basestring):
        origin = ', '.join(origin)
    if isinstance(max_age, timedelta):
        max_age = max_age.total_seconds()

    def get_methods():
        if methods is not None:
            return methods

        options_resp = current_app.make_default_options_response()
        return options_resp.headers['allow']

    def decorator(f):
        def wrapped_function(*args, **kwargs):
            if automatic_options and request.method == 'OPTIONS':
                resp = current_app.make_default_options_response()
            else:
                resp = make_response(f(*args, **kwargs))
            if not attach_to_all and request.method != 'OPTIONS':
                return resp

            h = resp.headers

            h['Access-Control-Allow-Origin'] = origin
            h['Access-Control-Allow-Headers'] = headers
            h['Access-Control-Allow-Methods'] = get_methods()
            h['Access-Control-Max-Age'] = str(max_age)
            if headers is not None:
                h['Access-Control-Allow-Headers'] = headers
            return resp

        f.provide_automatic_options = False
        return update_wrapper(wrapped_function, f)
    return decorator

#Celery initiator
def make_celery(app):
    celery = Celery(app.import_name)
    celery.config_from_object('celeryconfig')
    TaskBase = celery.Task
    class ContextTask(TaskBase):
        abstract = True
        def __call__(self, *args, **kwargs):
            with app.app_context():
                return TaskBase.__call__(self, *args, **kwargs)
    celery.Task = ContextTask
    return celery


#Server start
app = Flask(__name__)


app.config.update(
    CELERY_BROKER_URL='amqp://guest:guest@localhost:5672//',
    CELERY_RESULT_BACKEND='redis://localhost',
    CELERY_RESULT_PERSISTENT = False
)

celery = make_celery(app)




"""
@app.route('/', methods=['GET'])
def get_tasks():
    return jsonify({'tasks': tasks})

@app.route('/mclient_key=<int:task_id>', methods=['GET'])
def get_task(task_id):
    task = filter(lambda t: t['id'] == task_id, tasks)
    if len(task) == 0:
        abort(404)
    return jsonify({'task': task[0]})
"""


@app.route('/params', methods=['GET'])
def get_offer():
    
    cid_str = request.args.get('mclient_id')
    rtdm_ip = request.args.get('rtdm_ip')
    cid = int(cid_str)

    rtdm_path = "/RTDM/rest/runtime/decisions/SAS_for_Retail_Best_Retail_Oriented_Product_Promotion"
    rtdm_url="http://"+rtdm_ip+rtdm_path
    payload = {"clientTimeZone":"Europe/London","version":1,"inputs":{"CustomerID":cid,"ProdCatCode":"Leggings"}}
    r = requests.post(rtdm_url,json = payload)
    resp = r.json()
   
    output = resp['outputs']
    title = output['Offer2']
    description = output['Offer2URL']
    answer = [{'title':title,'description':description}]


    return jsonify({'offer':answer})






@app.route('/task', methods=['POST'])
def create_taskp():
    if not request.json or not 'title' in request.json:
        abort(400)
    new_task = {
        "opcode":"i",
        "Test_ID": tasks[-1]["id"] + 1,
        "Test_String": request.json["title"],
        "description": request.json.get('description', ""),
        "done": False

    }
    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
    channel = connection.channel()
    channel.queue_declare(queue='android_mq')
    channel.basic_publish(exchange='',routing_key='android_mq',body=str(new_task))
    tasks.append(new_task)
    msg = jsonify({'task': new_task}), 201
    #ctasks.publish(new_task)
    connection.close()
    return msg



@app.route('/', methods=['POST'])
def create_task():
    if not request.json or not 'title' in request.json:
        abort(418)
    ntime = strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())
    new_task = {
    "opcode": "i",
   # "Test_ID": tasks[-1]["id"] + 1,
	"Test_ID": "shit",
   # "": ntime,
	#"Test_String": request.json["title"]}
	"Test_String": "Fuck this"}

    x = str(new_task)
    x = x.replace("'",'"')
    result = send_mq.delay(x)
    return 'Success'


@app.route('/send', methods=['POST'])
def create_task2():
    Str = request.json["client_key"]
    status = 1
    #msg = Str + 1
    return jsonify({'Response':status})

@app.route('/bulk', methods=['POST'])
def create_load():
    cid = request.json["mclient_id"]
    rtdm_ip = request.json["rtdm_ip"]
    rtdm_path = "/RTDM/rest/runtime/decisions/SAS_for_Retail_Best_Retail_Oriented_Product_Promotion"
    rtdm_url="http://"+rtdm_ip+rtdm_path
    payload = {"clientTimeZone":"Europe/London","version":1,"inputs":{"CustomerID":cid,"ProdCatCode":"Leggings"}}
    r = requests.post(rtdm_url,json = payload)
    resp = r.json()
    o = r.content
       
    return o




@app.route('/atm_status', methods=['GET'])
@crossdomain(origin='*')
def get_atm_status():
    global atm_status
    
    change = request.args.get('change')
    
    if (change is not None):
        if (change == "true"):
            atm_status = True
        else:
            atm_status = False
    return jsonify({'status':atm_status})


y = "Vertel vas na huyu"


@app.route('/luna_test', methods=['PUT'])
def call_luna2():
    global y
    y = request.json
    return make_response(jsonify({'Request': str(y)}))

@app.route('/luna_test', methods=['GET'])
def call_luna3():
    global y
    
    response = make_response(jsonify({'response':y}))
    return response.headers


lunaresp = 'never used'
lunaans = 'never used'

@app.route('/luna', methods=['GET'])
@crossdomain(origin='*')
def result_luna():
    return make_response(jsonify({'luna_last_upload':lunaresp,'luna_last_match':lunaans}))
    
@app.route('/luna', methods=['OPTIONS'])
@crossdomain(origin='*',headers = 'Content-Type')
def send_options():
    global y
    
    return make_response(jsonify({'response':y}))
 
@app.route('/luna', methods=['PUT'])
@crossdomain(origin='*')
def call_luna():
    global lunaresp
    global lunaans
    image = request.json["data"]
#rid - applicant image , cid - client ID , bare - write to DB (True - no, False - yes)    
    try:
        rid = request.json["rid"]
    except Exception:
        rid = 500000
    if rid < 500000:
        rid = rid+500000
    try:
        cid = request.json["cid"]
    except Exception:
        cid = ''

    try:
        bare = request.json["bare"]
    except Exception:
        bare = True

    url = "http://luna.visionlabs.ru:8082/templates?id="+str(rid)
    usr = "SAS_LunaDemoAccess"
    psw = "U8mD8Q"
    payload = {"image":image, "bare":bare}
    try:
        r = requests.put(url,auth=(usr,psw),json = payload)
        lunaresp = str(r.json())
        status = str(r)
    except Exception:
        lunaresp = 'Luna failed on connection'
        return make_response(jsonify({'Luna':'Luna failed on connection'}),  415)  

    if ("200") in status:
        chk = 1
        gets = []
        candidates = str([1,2,3,4,5,6,500001])#str(range(1,1000))
        url_get = "http://luna.visionlabs.ru:8082/similar_templates?id="+str(rid)+"&candidates="+candidates[1:-1]
        g = requests.get(url_get,auth=(usr,psw))
   
        lunaans = str(g.json())
        
        res = {}
        res.update(g.json())
        res.update(r.json())
        res.update({'rid':rid})
        
        return make_response(jsonify(res), 201)   
    elif "500" in status:
        lunaans = 'Luna failed on upload'
        return make_response(jsonify({'Luna':'Luna failed on upload'}), 451)       
    else:
        chk = 0
        lunaans = status
        return make_response(jsonify({'test': {'response':lunaresp, 'status':status, 'check':chk}}), 418)


#Error handler
@app.errorhandler(404)
def not_found(error):
    return make_response(jsonify({'error': 'Not found'}), 404)

if __name__ == '__main__':
    app.run(host='172.28.104.171',debug=True)




